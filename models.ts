// this file was autogenerated by @iyio/protogen - https://github.com/iyioio/common/packages/protogen
// generator = zodGenerator
import { z } from 'zod';

const __base__ThreadScheme=z.object({
    id:z.string().max(255),
    uv:z.number().int(),
    name:z.string().max(255),
    /**
     * abbreviated 1 or 2 chars
     */
    abvName:z.string().max(255),
    description:z.string().max(255),
    created:z.number().int(),
    active:z.boolean(),
    startDate:z.number().int().optional(),
    endDate:z.number().int().optional(),
    timezone:z.string().max(255).optional(),
    startedAtDate:z.number().int().optional(),
    endedAtDate:z.number().int().optional(),
    featuredPostId:z.string().max(255).optional(),
    endingFeaturedPostId:z.string().max(255).optional(),
    postCount:z.number().int(),
    scenes:z.string().max(255).array().optional(),
    localeOverrides:z.record(z.string()),
    twilioRoomName:z.string().max(255).optional(),
    twilioRoomSid:z.string().max(255).optional(),
});
export const ThreadScheme=z.object({
    memberRequests:z.lazy(()=>ThreadMemberRequestScheme),
    logEvents:z.lazy(()=>LogEventScheme),
    members:z.lazy(()=>ThreadMemberScheme).optional(),
    defaultView:z.lazy(()=>ThreadViewScheme),
    status:z.lazy(()=>ThreadStatusScheme),
    lastPost:z.lazy(()=>PostSummaryScheme).optional(),
    posts:z.lazy(()=>PostScheme),
    ownedLinks:z.lazy(()=>ThreadLinkScheme),
    targetedLinks:z.lazy(()=>ThreadLinkScheme),
    posterSource:z.lazy(()=>MediaSourceScheme).optional(),
});
/**
 * A collection of Posts that can be displayed
 * as a space, session, chat or any other view
 * that represents a time series of events
 * and content.
 */
export type Thread=z.infer<typeof __base__ThreadScheme> & {
    memberRequests:ThreadMemberRequest;
    logEvents:LogEvent;
    members?:ThreadMember;
    defaultView:ThreadView;
    status:ThreadStatus;
    lastPost?:PostSummary;
    posts:Post;
    ownedLinks:ThreadLink;
    targetedLinks:ThreadLink;
    posterSource?:MediaSource;
};

const __base__UserScheme=z.object({
    id:z.string().max(255),
    uv:z.number().int(),
    cognitoId:z.string().max(255).optional(),
    name:z.string().max(255),
    /**
     * student, teacher, creator etc
     */
    typeName:z.string().max(255).optional(),
    created:z.number().int(),
    email:z.string().email().optional(),
    phone:z.string().max(255).optional(),
});
export const UserScheme=z.object({
    logEvents:z.lazy(()=>LogEventScheme),
    links:z.lazy(()=>LinkInfoScheme).optional(),
    postApprovals:z.lazy(()=>PostScheme),
    posts:z.lazy(()=>PostScheme),
    threadMemberApprovals:z.lazy(()=>ThreadMemberRequestScheme),
    memberRequests:z.lazy(()=>ThreadMemberRequestScheme),
    threads:z.lazy(()=>ThreadMemberScheme),
    profilePicture:z.lazy(()=>MediaSourceScheme).optional(),
});
export type User=z.infer<typeof __base__UserScheme> & {
    logEvents:LogEvent;
    links?:LinkInfo;
    postApprovals:Post;
    posts:Post;
    threadMemberApprovals:ThreadMemberRequest;
    memberRequests:ThreadMemberRequest;
    threads:ThreadMember;
    profilePicture?:MediaSource;
};

const __base__PostScheme=z.object({
    id:z.string().max(255),
    uv:z.number().int(),
    created:z.number().int(),
    /**
     * yyyy-mm
     */
    yearMonth:z.string().max(255),
    name:z.string().max(255),
    /**
     * If true all users can view the post
     */
    public:z.boolean(),
    ownerId:z.string().max(255).optional(),
    approvedById:z.string().max(255).optional(),
    type:z.string().max(255),
    threadId:z.string().max(255).optional(),
    responseToId:z.string().max(255),
    /**
     * @section Questions
     */
    questionResponseCorrectness:z.number().int().optional(),
    /**
     * @section Questions
     */
    questionResponseOptionId:z.string().max(255).optional(),
    /**
     * @section Questions
     */
    question:z.string().max(255).optional(),
    /**
     * @section Content
     */
    bgColor:z.string().max(255).optional(),
    /**
     * @section Content
     */
    data:z.string().max(255).optional(),
    /**
     * @section Content
     */
    dataContentType:z.string().max(255).optional(),
    /**
     * @section Other
     */
    email:z.string().email(),
    /**
     * @section Other
     */
    emailSecond:z.string().email().optional(),
    /**
     * @section Other
     */
    firstEmail:z.string().email().optional(),
    /**
     * @section Other
     */
    secondEmailSecure:z.string().email().optional(),
});
export const PostScheme=z.object({
    logEvents:z.lazy(()=>LogEventScheme),
    featuredBy:z.lazy(()=>ThreadScheme),
    featuredEndingBy:z.lazy(()=>ThreadScheme),
    responses:z.lazy(()=>PostScheme),
    questionType:z.lazy(()=>QuestionTypeScheme).optional(),
    questionOptions:z.lazy(()=>QuestionOptionScheme).optional(),
    mediaType:z.lazy(()=>MediaTypeScheme).optional(),
    posterSource:z.lazy(()=>MediaSourceScheme).optional(),
    mediaSource:z.lazy(()=>MediaSourceScheme).optional(),
});
/**
 * Post
 * 
 * ### Questions
 * Some posts will have questions
 * 
 * ### Content
 * Content related properties
 */
export type Post=z.infer<typeof __base__PostScheme> & {
    logEvents:LogEvent;
    featuredBy:Thread;
    featuredEndingBy:Thread;
    responses:Post;
    /**
     * @section Questions
     */
    questionType?:QuestionType;
    /**
     * @section Questions
     */
    questionOptions?:QuestionOption;
    /**
     * @section Content
     */
    mediaType?:MediaType;
    /**
     * @section Content
     */
    posterSource?:MediaSource;
    /**
     * @section Content
     */
    mediaSource?:MediaSource;
};

export const PostTypeScheme=z.enum([
    "image",
    "video",
    "question",
    "answer",
    "document",
    "avStream",
    "text",
    "url",
]);
export type PostType=z.infer<typeof PostTypeScheme>;

export const ApprovalStatusScheme=z.enum([
    "pending",
    "approved",
    "denied",
]);
export type ApprovalStatus=z.infer<typeof ApprovalStatusScheme>;

export const FileInfoScheme=z.object({
    url:z.string().max(255),
    contentType:z.string().max(255),
    isDataUri:z.boolean().optional(),
    sizeBytes:z.number().int(),
    width:z.number().int().optional(),
    height:z.number().int().optional(),
    created:z.number().int().optional(),
    bucket:z.string().max(255).optional(),
    bucketKey:z.string().max(255).optional(),
    createdByUserId:z.string().max(255).optional(),
});
/**
 * Generated URLs should contain a 
 * cryptographically unique / secure 
 * value. URL unpredictability is 
 * used as a security mechanism.
 */
export type FileInfo=z.infer<typeof FileInfoScheme>;

export const QuestionTypeScheme=z.enum([
    "multiChoice",
    "text",
    "media",
    "survey",
]);
export type QuestionType=z.infer<typeof QuestionTypeScheme>;

const __base__LogEventScheme=z.object({
    id:z.string().max(255),
    content:z.string().max(255).optional(),
    created:z.number().int(),
    /**
     * yyyy-mm
     */
    yearMonth:z.string().max(255),
    threadId:z.string().max(255).optional(),
    userId:z.string().max(255).optional(),
    postId:z.string().max(255).optional(),
});
export const LogEventScheme=z.object({
    type:z.lazy(()=>LogEventTypeScheme),
});
export type LogEvent=z.infer<typeof __base__LogEventScheme> & {
    type:LogEventType;
};

export const LogEventTypeScheme=z.enum([
    "viewPost",
    "createPost",
    "enterThread",
    "exitThread",
    "answerQuestion",
    "answerQuestionCorrect",
    "answerQuestionIncorrect",
]);
export type LogEventType=z.infer<typeof LogEventTypeScheme>;

export const ThreadStatusScheme=z.enum([
    "beforeOpen",
    "open",
    "closed",
]);
export type ThreadStatus=z.infer<typeof ThreadStatusScheme>;

export const ThreadViewScheme=z.enum([
    "util",
    "space",
    "canvas",
    "chat",
]);
export type ThreadView=z.infer<typeof ThreadViewScheme>;

const __base__ThreadLinkScheme=z.object({
    id:z.string().max(255),
    uv:z.number().int(),
    ownerId:z.string().max(255),
    targetId:z.string().max(255),
    passRoles:z.boolean().optional(),
    name:z.string().max(255).optional(),
});
export const ThreadLinkScheme=z.object({
    passRolesFilter:z.lazy(()=>ThreadRoleScheme).optional(),
});
export type ThreadLink=z.infer<typeof __base__ThreadLinkScheme> & {
    passRolesFilter?:ThreadRole;
};

const __base__MediaSourceScheme=z.object({
    blurPreview:z.string().max(255).optional(),
});
export const MediaSourceScheme=z.object({
    sm:z.lazy(()=>FileInfoScheme).optional(),
    md:z.lazy(()=>FileInfoScheme).optional(),
    lg:z.lazy(()=>FileInfoScheme).optional(),
    source:z.lazy(()=>FileInfoScheme).optional(),
    additional:z.lazy(()=>FileInfoScheme).optional(),
});
export type MediaSource=z.infer<typeof __base__MediaSourceScheme> & {
    sm?:FileInfo;
    md?:FileInfo;
    lg?:FileInfo;
    source?:FileInfo;
    additional?:FileInfo;
};

export const MediaTypeScheme=z.enum([
    "image",
    "video",
    "audio",
]);
export type MediaType=z.infer<typeof MediaTypeScheme>;

const __base__QuestionOptionScheme=z.object({
    id:z.string().max(255),
    text:z.string().max(255).optional(),
    correctness:z.number().int().optional(),
});
export const QuestionOptionScheme=z.object({
    media:z.lazy(()=>MediaSourceScheme).optional(),
});
export type QuestionOption=z.infer<typeof __base__QuestionOptionScheme> & {
    media?:MediaSource;
};

const __base__ThreadMemberScheme=z.object({
    id:z.string().max(255),
    uv:z.number().int(),
    created:z.number().int(),
    requestId:z.string().max(255).optional(),
    order:z.number().int().optional(),
    threadId:z.string().max(255),
    userId:z.string().max(255),
    /**
     * student, teacher, creator etc
     */
    typeName:z.string().max(255).optional(),
    name:z.string().max(255),
    profileImageUrl:z.string().max(255).optional(),
    isFeatured:z.boolean().optional(),
});
export const ThreadMemberScheme=z.object({
    roles:z.lazy(()=>ThreadRoleScheme),
});
/**
 * A User's relation to a Thread
 */
export type ThreadMember=z.infer<typeof __base__ThreadMemberScheme> & {
    roles:ThreadRole;
};

export enum ThreadRole{
    threadAdmin=1,
    manageRoles=2,
    listMembers=3,
    addMember=4,
    removeMember=5,
    listPosts=6,
    viewPost=7,
    addPost=8,
    removePost=9,
    editPost=10,
    addPostImage=101,
    addPostVideo=102,
    addPostQuestion=103,
    addPostAnswer=104,
    addPostDocument=105,
    addPostAvStream=106,
    addPostText=107,
    addPostUrl=108,
}
export const ThreadRoleScheme=z.nativeEnum(ThreadRole)

const __base__ThreadMemberRequestScheme=z.object({
    id:z.string().max(255),
    uv:z.number().int(),
    created:z.number().int(),
    userId:z.string().max(255),
    approvedById:z.string().max(255).optional(),
    threadId:z.string().max(255),
});
export const ThreadMemberRequestScheme=z.object({
    resultMemberId:z.lazy(()=>ThreadMemberScheme).optional(),
    requestedRoles:z.lazy(()=>ThreadRoleScheme).optional(),
});
export type ThreadMemberRequest=z.infer<typeof __base__ThreadMemberRequestScheme> & {
    resultMemberId?:ThreadMember;
    requestedRoles?:ThreadRole;
};

export const LocalizationPackScheme=z.object({
    id:z.string().max(255),
    uv:z.number().int(),
    scene:z.string().max(255).optional(),
    /**
     * en, en-us, mx, dk, etc
     */
    locales:z.string().max(255).array().optional(),
    map:z.record(z.string()),
});
export type LocalizationPack=z.infer<typeof LocalizationPackScheme>;

export const LinkInfoScheme=z.object({
    name:z.string().max(255),
    icon:z.string().max(255),
    url:z.string().max(255),
});
export type LinkInfo=z.infer<typeof LinkInfoScheme>;

export const PostSummaryScheme=z.object({
    title:z.string().max(255),
    description:z.string().max(255),
    thumbnailUrl:z.string().max(255).optional(),
    previewUrl:z.string().max(255).optional(),
    postId:z.string().max(255),
});
export type PostSummary=z.infer<typeof PostSummaryScheme>;

const __base__ThreadPermissionScheme=z.object({
    uid:z.string().max(255),
    tid:z.string().max(255),
});
export const ThreadPermissionScheme=z.object({
    roles:z.lazy(()=>ThreadRoleScheme),
});
export type ThreadPermission=z.infer<typeof __base__ThreadPermissionScheme> & {
    roles:ThreadRole;
};

const __base__CreatePostRequestScheme=z.object({
});
export const CreatePostRequestScheme=z.object({
    post:z.lazy(()=>PostScheme),
});
export type CreatePostRequest=z.infer<typeof __base__CreatePostRequestScheme> & {
    post:Post;
};

const __base__SpaceModelScheme=z.object({
});
export const SpaceModelScheme=z.object({
    thread:z.lazy(()=>ThreadScheme),
    nextSession:z.lazy(()=>ThreadScheme).optional(),
    upcomingSessions:z.lazy(()=>ThreadScheme),
    members:z.lazy(()=>ThreadMemberScheme),
    featuredMember:z.lazy(()=>ThreadMemberScheme).optional(),
    featuredMembers:z.lazy(()=>ThreadMemberScheme),
});
export type SpaceModel=z.infer<typeof __base__SpaceModelScheme> & {
    thread:Thread;
    nextSession?:Thread;
    /**
     *   The next N upcoming sessions. Later
     *   sessions will be loaded as needed
     */
    upcomingSessions:Thread;
    members:ThreadMember;
    featuredMember?:ThreadMember;
    featuredMembers:ThreadMember;
};

export const UserInfoScheme=z.object({
    name:z.string().max(255),
    /**
     * ...
     */
    description:z.string().max(255),
});
/**
 * A public view of a User object
 */
export type UserInfo=z.infer<typeof UserInfoScheme>;

export const UserMatchOptionsScheme=z.object({
    id:z.string().max(255).optional(),
    name:z.string().max(255).optional(),
    email:z.string().email().optional(),
    phone:z.string().max(255).optional(),
});
export type UserMatchOptions=z.infer<typeof UserMatchOptionsScheme>;

export const TimelineRequestScheme=z.object({
    threadId:z.string().max(255).optional(),
    /**
     *   Used for pagination
     */
    page:z.string().max(255).optional(),
});
export type TimelineRequest=z.infer<typeof TimelineRequestScheme>;

const __base__TimelineItemScheme=z.object({
    title:z.string().max(255),
    startDate:z.number().int(),
    endDate:z.number().int().optional(),
});
export const TimelineItemScheme=z.object({
    type:z.lazy(()=>TimelineItemTypeScheme),
    threads:z.lazy(()=>ThreadScheme),
    posts:z.lazy(()=>PostScheme),
    sessionInfo:z.lazy(()=>SessionInfoScheme).optional(),
});
export type TimelineItem=z.infer<typeof __base__TimelineItemScheme> & {
    type:TimelineItemType;
    threads:Thread;
    posts:Post;
    sessionInfo?:SessionInfo;
};

const __base__TimelineResultScheme=z.object({
});
export const TimelineResultScheme=z.object({
    items:z.lazy(()=>TimelineItemScheme),
});
export type TimelineResult=z.infer<typeof __base__TimelineResultScheme> & {
    items:TimelineItem;
};

export const TimelineItemTypeScheme=z.enum([
    "postCollection",
    "session",
]);
export type TimelineItemType=z.infer<typeof TimelineItemTypeScheme>;

export const SpaceModelRequestScheme=z.object({
    threadId:z.string().max(255),
});
export type SpaceModelRequest=z.infer<typeof SpaceModelRequestScheme>;

const __base__ThreadInfoScheme=z.object({
    name:z.string().max(255),
    image:z.null(),
});
export const ThreadInfoScheme=z.object({
});
export type ThreadInfo=z.infer<typeof __base__ThreadInfoScheme>;

export const CalculateThreadPermissionOptionsScheme=z.object({
    userId:z.string().max(255),
    threadId:z.string().max(255),
});
export type CalculateThreadPermissionOptions=z.infer<typeof CalculateThreadPermissionOptionsScheme>;

const __base__SessionInfoScheme=z.object({
    name:z.string().max(255),
    attendeesCount:z.number().int(),
    postCount:z.number().int(),
    lengthMinutes:z.number().int(),
    questionCount:z.number().int(),
});
export const SessionInfoScheme=z.object({
});
export type SessionInfo=z.infer<typeof __base__SessionInfoScheme>;